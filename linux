oracle virtualbox download
첫번째 클릭

좌측 다운로드 클릭

VirtualBox 6.0.24 클릭
Windows hosts 클릭


최신버전 (최신버전으로 함)
VirtualBox 6.1.34 platform packages
Windows hosts 클릭


linux mint download
첫번째 클릭

Cinnamon Edition 클릭
South Korea KAIST 클릭

=========================================================================================


sudo ~ -> 관리자 권한으로 ~ 실행
apt update -> 업그레이드할 수 있는 내용 업데이트
apt upgrade -> 업데이트시 할 수 있는 업그레이드 실행

sudo apt upgrade -y 업그레이트시 yes 기본 응답
sudo apt update && sudo apt upgrade -> &&(and) 업데이트, 업그레이드 동시 실행(둘 다 참이여야 가능)

pwd(print working directory) -> 현재 위치한 디렉토리
cd / -> 최상위 폴더로 이동


ls(list) -> 현재 위치에 존재하는 폴더, 파일

cd ~ -> 문서 이동
cd -> home 디렉토리로 이동 (cd ~)도 가능
ls -l -> 리스트를 길게 보여주기
ls -a(all) -> 리스트 전부 다 보여주기
ls -al -> -l, -a 한번에 보여주기

cd ./.././.././././ -> ./은 의미가 없음 ../ 만 인식해 작성한 만큼 상위 폴더로 이동

clear -> 터미널 화면 클리어

echo "~~" -> "" 화면 출력 (표준출력, stdout)
echo "~~" > 파일명 -> 파일명에 저장 (같은 파일에 저장하면 덮어씌어짐)
echo "~~" >> 파일명 -> 파일명에 저장 (파일에 추가로 저장됨)
 ">" (redirect) - 출력, 입력방향을 바꾼다.
cat 파일명 -> 파일 내용 읽어오기

ls -l > 파일명 -> 현재 화면에 있는 파일, 디렉토리를 파일에 모두 저장

복사할 부분 스크랩 후 휠버튼 클릭시 복사

more 파일명 -> 해당되는 파일 보여주기
ls -al | more -> ls -al 에서 나온 결과가 more뒤에 파일명에 들어감 (리스트가 한화면에 출력되며, enter로 한줄씩 추가적으로 출력)
(| -> 파이프라인)


less 파일명 -> 해당되는 파일 보여주기 (q -> 나가기)

ls -al | head -3 > 파일명 -> 파일명에 3줄만 파일만 저장

file 파일명 -> 파일명의 파일정보 출력

echo $SHELL -> shell

whoami -> 현재 로그인되어있는 정보

ctrl + C -> 강제 종료

head -0 파일명 -> -에 붙인 숫자만큼만 줄 출력
tail -0 파일명 -> -에 붙인 숫자만큼만 줄 출력

aaa="a a a" -> aaa라는 변수에 "a a a" 값 저장
$ -> 값을 읽어오고싶은 변수명 앞에 붙인다.
echo $aaa -> a a a 출력

history -> 현재까지 타이핑한 명령어 출력
!숫자 -> history에 출력된 명령어와 연결된 숫자의 명령어 실행
!! -> 바로 전 명령어 실행
!!!!!!!!!!!!!!!!!!!!...! (!! X n개) -> !! 친 갯수만큼 바로 전 명령어 실행

mkdir 폴더명 -> 폴더 생성

cp 파일명 지정파일명 -> 파일을 지정한 이름으로 복사할 수 있음
cp -r 폴더명 지정폴더명 -> 폴더 내에 있는 파일, 폴더까지 모두 복사

~* -> ~로 시작하는 모든 것

rm 파일명 -> 선택된 파일 삭제(복구 불가능)
rmdir 폴더명 -> 선택된 폴더 삭제(비어있는 폴더만 가능)
rm -fR 폴더명 -> 선택된 폴더 삭제(-fR 강제)

mv 파일명 위치 -> 위치로 파일명이 잘라서 붙여짐

mv 파일명 변경할파일명 -> 파일명 변경 (파일명이 다른 폴더,파일명과 같이 않아야함)

리눅스는 드라이버(c: d:) 개념이 없다.
리눅스는 여러 사용자가 같이 사용 할 수 있다.


vi 이름 -> 이름으로 된 터미널 {
명령어모드 - esc 2번 {
    - yy 복사
    - p 붙여넣기
    - dd 지우기
    - x 한글자 지우기
    - a 선택한 줄 뒤에 글 재입력 가능
    - cw 단어 변경
    - $ 선택된 줄 맨 뒤로 이동
    - / 단어 찾기 (n -> next 다음 단어 이동)
    - ? 역방향 단어찾기
    - : 명령어 사용 가능하게끔 {
        set number - 줄번호 표시
        6,10y - 6번줄부터 10번줄까지 복사
        w - 저장
        w 파일명 - 파일명으로 저장
        wq - 작업 종료
    }
}
입력모드 - 소문자 i
ctrl + S -> 화면 잠깐 멈춤
ctrl + Q -> 화면 멈춤 해제
}

vim 이름 - vim 텍스트 에디터 {
    gcc 저장이름.c - 컴파일 (default로 a.out 생성)
    gcc 저장이름.c -o 파일명 - 파일명으로 컴파일
    ./컴파일된파일명 - 파일 실행
}


$환경변수 대문자로 작성

xeyes -> 마우스 포인터를 알려주는 눈알 두개 생성
굉장히 큰 화면에서 작업을 하는 경우가 대다수여서 마우스 포인터를 못찾는 경우가 허다했다고 함
대신 그 터미널에선 xeyes를 종료하지 않는한 더이상 작업이 불가능함

Background Process(&) - 뒤에서 실행시킬 수 있는 프로세스
xeyes & -> 터미널에서도 작업이 가능함과 동시에 xeyes도 실행중(xeyes는 Background에서 실행중)


drwxr-xr-x
directory ~~~~

== 디렉토리 ==
bin - binary 명령어 관련 폴더
boot - 설정폴더
sbin - systembinary 시스템관리자 관련 명령어
var - log파일 저장
home - 현재 로그인되어있는 사용자 폴더
파일 혹은 디렉토리가 .으로 시작한다면 hidden(숨김)파일, 디렉토리


사용자 명령어가 IS 를 통해 Shell에 전달 되고 OS로 전달되어 사용자가 보내고자 하는 명령어를

Shell - 중간관리자
Shell Script - Shell을 제어하는 프로그램