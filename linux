oracle virtualbox download
첫번째 클릭

좌측 다운로드 클릭

VirtualBox 6.0.24 클릭
Windows hosts 클릭


최신버전 (최신버전으로 함)
VirtualBox 6.1.34 platform packages
Windows hosts 클릭


linux mint download
첫번째 클릭

Cinnamon Edition 클릭
South Korea KAIST 클릭


== 디렉토리 ==
bin - binary 명령어 관련 폴더
boot - 설정폴더
sbin - systembinary 시스템관리자 관련 명령어
var - log파일 저장
home - 현재 로그인되어있는 사용자 폴더
파일 혹은 디렉토리가 .으로 시작한다면 hidden(숨김)파일, 디렉토리


사용자 명령어가 IS 를 통해 Shell에 전달 되고 OS로 전달되어 사용자가 보내고자 하는 명령어를

Shell - 중간관리자
Shell Script - Shell을 제어하는 프로그램

=========================================================================================


sudo ~ -> 관리자 권한으로 ~ 실행

sudo su -> super user로 변경  (sudo 적지 않아도 관리자 권한으로 실행 가능)
root@...:/home/...# -> 현재 최고 관리자로써 실행되고 있다는 코드

apt update -> 업그레이드할 수 있는 내용 업데이트
apt upgrade -> 업데이트시 할 수 있는 업그레이드 실행

sudo apt upgrade -y 업그레이트시 yes 기본 응답
sudo apt update && sudo apt upgrade -> &&(and) 업데이트, 업그레이드 동시 실행(둘 다 참이여야 가능)

sudo useradd user이름 -> 유저 추가
sudo passwd user이름 -> 유저 패스워드 부여
cat etc/passwd -> 추가된 유저 확인 가능한 파일

sudo chown 폴더소유자명:그룹소유자명 폴더명 -> 폴더명의 주인을 폴더소유자,그룹소유자명으로 변경

로그아웃 후 화면을 보면 사용자가 추가된 것을 볼 수 있다.

su 유저명 -> 터미널창에서 유저로 변경
su -l 유저명 -> 터미널창에서 유저 및 디렉토리로 변경
그러나 추가된 유저는 root로 진입할 수 없음

xed 파일명 -> 파일명으로 된 메모장 생성
(메모장에 실행 가능한 명령어 작성 후 저장 후,)
source 파일명 -> 파일 안 내용이 실행 가능한 명령어라면 내용대로 실행
. 파일명 -> source와 같은 명령어

chmod 000 파일,폴더명 -> 파일, 폴더에 권한주기

권한주기
 rwx   rwx     rwx -> r(read) 읽을 수 있는 권한, w(write) 변경할 수 있는 권한, x(excute) 실행시킬 수 있는 권한
소유자 그룹 아더(other)
 111   011     001 -> 각각의 권한을 0, 1로 부여할 수 있다.
111 -> 10진수로 변경한 후 그 10진수를 000에 기입, 차례대로 그룹, 아더도 기입
ex) chmod 731 파일명 -> 파일에 대한 권한을 소유자는 모든 권한을, 그룹은 변경과 실행 권한을, 아더는 실행 권한을 가진다.
(보통 755, 744를 가장 많이 함)

chmod a+x 파일명 -> 모두(all)에게 x권한을 준다(+).
chmod a-r 파일명 -> 모두(all)에게 r권한을 뺀다(-).
(a -> all, u -> 소유자, g -> 그룹, o -> 아더)
("+" -> 권한 부여, "-" -> 권한 박탈)
(r -> read, w -> write, x -> excute)


pwd(print working directory) -> 현재 위치한 디렉토리
cd / -> 최상위 폴더로 이동

ls(list) -> 현재 위치에 존재하는 폴더, 파일

cd 이동할폴더 -> 문서 이동
cd -> 최상 디렉토리로 이동 (cd ~)도 가능
cd .. -> home 디렉토리 이동
ls -l -> 리스트를 길게 보여주기
ls -l 파일,디렉토리명 -> 파일,디렉토리명만 보여주기
ls -a(all) -> 리스트 전부 다 보여주기
ls -al -> -l, -a 한번에 보여주기

cd ./.././.././././ -> ./은 의미가 없음 ../ 만 인식해 작성한 만큼 상위 폴더로 이동

clear -> 터미널 화면 클리어

echo "~~" -> "" 화면 출력 (표준출력, stdout)
echo "~~" > 파일명 -> 파일명에 저장 (같은 파일에 저장하면 덮어씌어짐)
echo "~~" >> 파일명 -> 파일명에 저장 (파일에 추가로 저장됨)
 ">" (redirect) - 출력, 입력방향을 바꾼다.
cat 파일명 -> 파일 내용 읽기

ls -l > 파일명 -> 현재 화면에 있는 파일, 디렉토리를 파일에 모두 저장

복사할 부분 스크랩 후 휠버튼 클릭시 복사

more 파일명 -> 해당되는 파일 보여주기
ls -al | more -> ls -al 에서 나온 결과가 more뒤에 파일명에 들어감 (리스트가 한화면에 출력되며, enter로 한줄씩 추가적으로 출력)
(| -> 파이프라인)


less 파일명 -> 해당되는 파일 보여주기 (q -> 나가기)

ls -al | head -3 > 파일명 -> 파일명에 3줄만 파일만 저장

file 파일명 -> 파일명의 파일정보 출력

echo $SHELL -> shell

whoami -> 현재 로그인되어있는 정보

ctrl + C -> 강제 종료

head -0 파일명 -> -에 붙인 숫자만큼만 줄 출력
tail -0 파일명 -> -에 붙인 숫자만큼만 줄 출력

aaa="a a a" -> aaa라는 변수에 "a a a" 값 저장
$ -> 값을 읽어오고싶은 변수명 앞에 붙인다.
echo $aaa -> a a a 출력

history -> 현재까지 타이핑한 명령어 출력
!숫자 -> history에 출력된 명령어와 연결된 숫자의 명령어 실행
!! -> 바로 전 명령어 실행
!!!!!!!!!!!!!!!!!!!!...! (!! X n개) -> !! 친 갯수만큼 바로 전 명령어 실행

mkdir 폴더명 -> 폴더 생성

cp 파일명 지정파일명 -> 파일을 지정한 이름으로 복사할 수 있음
cp -r 폴더명 지정폴더명 -> 폴더 내에 있는 파일, 폴더까지 모두 복사

~* -> ~로 시작하는 모든 것

rm 파일명 -> 선택된 파일 삭제(복구 불가능)
rmdir 폴더명 -> 선택된 폴더 삭제(비어있는 폴더만 가능)
rm -fR 폴더명 -> 선택된 폴더 삭제(-fR 강제)

mv 파일명 위치 -> 위치로 파일명이 잘라서 위치에 붙여짐 (파일을 이동)
mv 파일명 변경할파일명 -> 파일명 변경 (파일명이 다른 폴더,파일명과 같이 않아야함)
mv 파일명 ~/ -> home 디렉토리로 잘라서 붙임 (homd 디렉토리로 이동)

리눅스는 드라이버(c: d:) 개념이 없다.
리눅스는 여러 사용자가 같이 사용 할 수 있다.


vi 이름 -> 이름으로 된 터미널 {
명령어모드 - esc 2번 {
    - yy 복사
    - p 붙여넣기
    - dd 지우기
    - x 한글자 지우기
    - a 선택한 줄 뒤에 글 재입력 가능
    - cw 단어 변경
    - $ 선택된 줄 맨 뒤로 이동
    - / 단어 찾기 (n -> next 다음 단어 이동)
    - ? 역방향 단어찾기
    - : 명령어 사용 가능하게끔 {
        set number - 줄번호 표시
        6,10y - 6번줄부터 10번줄까지 복사
        w - 저장
        w 파일명 - 파일명으로 저장
        wq - 작업 종료
    }
}
입력모드 - 소문자 i
ctrl + S -> 화면 잠깐 멈춤
ctrl + Q -> 화면 멈춤 해제
}

vim 이름 - vim 텍스트 에디터 {
    gcc 저장이름.c - 컴파일 (default로 a.out 생성)
    gcc 저장이름.c -o 파일명 - 파일명으로 컴파일
    ./컴파일된파일명 - 파일 실행
}


$환경변수 대문자로 작성

xeyes -> 마우스 포인터를 알려주는 눈알 두개 생성
굉장히 큰 화면에서 작업을 하는 경우가 대다수여서 마우스 포인터를 못찾는 경우가 허다했다고 함
대신 그 터미널에선 xeyes를 종료하지 않는한 더이상 작업이 불가능함

Background Process(&) - 뒤에서 실행시킬 수 있는 프로세스
xeyes & -> 터미널에서도 작업이 가능함과 동시에 xeyes도 실행중(xeyes는 Background에서 실행중)

xeyes &
xeyes  
명령어 작성 후
ctrl + C 하게 되면 백그라운드에 실행되는 xeyes는 종료되지 않고 xeyes만 종료된다.

ps -ef -> 현재 실행중인 프로세스 모두 출력
kill PID -> 백그라운드에서 실행중인 파일 터미널에서 종료

백그라운드에서 실행중인 xeyex를 종료시키기 위해선 ps 명령어 후 PID가 나오는데
kill PID 를 하면 종료된다.

kill -9 -> kill 한번으로 종료되지 않는 프로세스 죽을때까지 kill 반복

man 명령어 -> 명령어에 대한 메뉴얼


tar cvf 폴더명.tar (파일명 파일명 파일명 ...) -> 파일들을 .tar로 묶어줌 (1개부터 여러개도 파일명 작성 가능)
tar xvf 폴더명.tar -> tar파일 압축 해제

gzip 파일명 -> 지정한 파일을 .gz로 압축 (뒤에 숫자를 줄 수 있으며 숫자는 압축률을 말함)
gunzip 파일명 -> .gz 파일 압축 해제

tar zxvf 파일명 -> .tar.gz 로 압축된 파일 한번에 압축 해제

grep 찾을내용 파일명 -> 찾을내용이 파일 안에 존재하는지 검색
grep 찾을내용 * -> 모든 파일에 찾을내용이 존재하는지 검색
grep -i 찾을내용 파일명or* -> -i 대소문자 구분 X

find 위치 -name "파일명" -> 위치에 파일명이 존재하는지 검색
./ -> 하위폴더 위치에서 모두 검색
/ -> 전체 검색

"*.c" -> .c로 끝나는 모든 파일 검색


find 위치 -name "*.c" | xargs grep -i "찾을내용" -> .c로 끝나는 모든 파일에서 찾을 내용을 대소문자 구분 없이 검색 후 출력
|(파이프라인)을 쓰기 위해선 | 뒤에 xargs 붙임
find는 파이프라인을 지원하지 않지만 xargs로 강제로 지원하도록 만들어줌

alias 별명='명령어' -> 명령어를 별명으로 줄여서 사용
터미널에 별명만 치면 명령어 자동 실행

unalias 별명 -> 별멍 alias 삭제

alias > aliaslist
현재 alias로 저장되어 있는 것들을 aliaslist 파일로 생성 (>)

crontab -> 특정시간에 특정 기능을 수행하는 스케쥴러
(cron 표현식 검색해 원하는 시간 설정 가능)

분 시 일 월 요일 명령어 -> 설정한 시간에 맞춰 명령어를 실행

fbi - echo "hello linux" >> fbiFile
0  5  *  *   l /home/soo/fbi -> ex) 매월 매일 새벽 5시 0분 월요일에 home/soo/fbi를 실행해라
분 시 일 월 요일

즉, hello linux를 출력하는 파일인 fbi를 1분마다 파일화하는 스케줄을 실행하는 것

*/1 * * * * -> 매 1분마다 작동

crontab -l -> 스케줄러 실행중인 파일 리스트

service cron start -> 스케줄러 실행
service cron restart -> 스케줄러 재실행
service cron stop -> 스케줄러 종료

ls -lrt -> 시간 역순 정렬 리스트 출력

select tab키 -> select 명령어 출력

select-editor -> ??

=========================================================

linux svn

sudo apt install subversion subversion-tools -> svn 설치

svn --help -> svn 명령어 출력

sudo svnadmin create [이름] -> 현재 경로에 이름으로 된 저장소 생성
sudo svn import [경로] file:///[svn저장소]/[폴더명] -m "commit message"; -> 경로의 디렉토리를 가져와 폴더명으로 저장소에 저장한 후 commit message로 업로드한다.

svn checkout file:///[저장소경로]/[폴더명] -> 저장소에 있는 폴더명을 밖으로 내보낸다.
svn checkout file:///[저장소경로]/[폴더명] [주고싶은폴더명] -> 저장소에 있는 폴더명을 주고싶은폴더명으로 저장후 밖으로 내보낸다.

svn svnserve -d -r [저장소경로] -> svn 서버 구동 (-r : 루트디렉토리)
ps -ef | grep -i svnser -> 구동중인 svnser 프로세스 검색

svn checkout svn://localhost/[폴더명] [주고싶은폴더명] -> 주고싶은 폴더명으로 svn폴더를 내보낸다.
localhost - 루트디렉토리로 설정한 경로

1. 저장소 생성
2. 저장소에 파일 저장 (import)
3. svn 서버 구동 (루트디렉토리(home) 설정)
4. checkout으로 확인


svn status -> 변경된 상태 혹은 현재 상태 확인 (M -> 수정된 파일(Modify), ? -> 현재 상태를 알지 못함, A -> 생성한 파일(Add))

svn commit [commit할 파일명] -m "commit message" -> 변경된 상태 commit

저장소 -> conf -> svnserve.conf -> sudo xed svnserve.conf 명령어를 통해 파일 열기
-> anon-access = read, anon-access = write 앞에 "#" 제거해 열어주기
-> password-db = passwd 앞에 "#" 제거해 파일 사용하겠다고 알리기
-> sudo xed passwd 명령어를 통해 passwd파일 열기
-> [users] 아래에 사용자를 추가한다. [아이디=암호]

커밋할 권한이 생기게 되어 커밋이 가능하다.

다시 커밋해보면 커밋 성공.

SVN {
    commit -> server로 전송
    update -> server에 있는 최신정보 업데이트
}

svn add [add할 파일] -> 새로 만든 파일을 add 한다.
새 파일을 만들었으면 add해서 생성된 파일임을 알려주어야 한다.
그냥 하게 될시 생성된 파일의 상태는 "?" 로 찍힌다.
add 해주어야 현재 상태가 A로 변환되어 commit이 가능하다.

svn update -> server에 commit된 최신 버전으로 업데이트한다.


apache 연결

sudo apt update
sudo apt upgrade 
sudo apt install apache2 apache2-utils
sudo service apache2 start
http://localhost 로 접속하면 확인이 가능하다.


svn log -> 커밋한 시간, 커밋메세지 출력


etc/apache2/modes-enabled 에 있는 파일 모두 ls -l 해보면 "->" 표시가 있다.
모두 바로가기라는 뜻

ls dav* -> sudo xed dav_svn.conf 로 메모장으로 연 후 맨 밑에

<Location /svn>
 DAV svn
 SVNParentPath /home/svn
 AuthType Basic
 AuthName "Subversion Repository"
 AuthUserFile /etc/apache2/dav_svn.passwd
 Require valid-user
</Location>

붙여넣기 후 저장

sudo a2enmod dav_svn -> svn 모듈 활성화 시키기

sudo htpasswd -cm /etc/apache2/dav_svn.passwd [사용자이름] -> 사용자 등록
암호를 물어보면 암호 지정
cat /etc/apache2/dav_svn.passwd -> 사용자가 추가되었는지 cat 명령어를 통해 확인하기

똑같은 경로에 사용자 이름만 변경하게 되면 추가등록이 아닌 덮어씌어짐
sudo htpasswd -m /etc/apache2/dav_svn.passwd [사용자이름] -> -cm이 아닌 -m으로 하게 되면 사용자가 추가됨

sudo service apache2 restart -> apache서버 재구동

apache서버와 svn이 연결되었기 때문에 localhost/svn/[폴더]를 입력하면 연결됨

연결하고 싶은 폴더 경로에 svn co http://localhost/svn/[폴더명] [이름] -> 현재 경로에 아파치서버와 연결된 폴더 생성
현재 사용자의 암호와 localhost의 사용자명, 암호를 적으면 연결 성공

폴더에 파일 생성후 localhost/svn/[폴더명] 을 주소로 치면 폴더에 들어가있는 파일 출력
